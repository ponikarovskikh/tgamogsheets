from telebot import TeleBot, types
from telebot.util import quick_markup
from telebot.callback_data import CallbackData, CallbackDataFilter
from telebot import types, TeleBot
from telebot.custom_filters import AdvancedCustomFilter
from sheetsscript import *
from amocrmscript import *



bot=TeleBot(token='7955421291:AAGz1wD0KqA6Gu0QCwZEhX6w3Yjw524hehs')

# products_factory = CallbackData('product_id', prefix='products')



@bot.message_handler(commands=['start'])
def send_welcome(message):
        bot.send_message(message.chat.id,text= "–≠—Ç–æ –±–æ—Ç –ø–æ —Éc–ª—É–≥–∞–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å–≤–∞\n")
        markup = quick_markup({

                '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüîî': {'callback_data': 'makerq'},
                '–°–ø—Ä–∞–≤–∫–∞üßæ': {'callback_data': 'info'},

        }, row_width=1)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ", reply_markup=markup)

#keyboards
def menu_markup():
    return quick_markup({

                '–û—Å—Ç–∞–≤–∏—Ç—å –ó–∞—è–≤–∫—Éüîî': {'callback_data': 'makerq'},
                '–°–ø—Ä–∞–≤–∫–∞üßæ': {'callback_data': 'info'},

        }, row_width=1)
def back_markup():
        return  quick_markup({


                '–ù–∞–∑–∞–¥': {'callback_data': 'back'},

        }, row_width=1)
# dict
userdata={}
@bot.callback_query_handler(func=lambda callback:callback.data)
def product_one_callback(callback,*args):
        print(callback.message.chat.id)
        if callback.data=='info':
                bot.edit_message_text(
                        chat_id=callback.message.chat.id,
                        message_id=callback.message.id,
                        text=f'–°–ø—Ä–∞–≤–∫–∞\n'
                                 f'–≤–≤–µ–¥–∏—Ç–µ:'
                                 f'1)—Ñ–∏–æ'
                                 f'2)–∫–æ–º–ø–∞–Ω–∏—è'
                                 f'3)—Ç–µ–ª–µ—Ñ–æ–Ω'
                                 f'–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏',
                        reply_markup=back_markup())
        if callback.data == 'back':
                bot.edit_message_text(
                        chat_id=callback.message.chat.id,
                        message_id=callback.message.id,
                        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                        reply_markup=menu_markup())
        if callback.data == 'makerq':
            bot.send_message(callback.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è')
            bot.register_next_step_handler(message=callback.message,callback=getname_handler)
            bot.delete_message(callback.message.chat.id,callback.message.id,4)

@bot.message_handler(content_types=['text'])
def getname_handler(message):
    user_id = message.chat.id
    name = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á user_id –≤ —Å–ª–æ–≤–∞—Ä–µ user_data
    if user_id not in userdata:
        userdata[user_id] = {}
    userdata[user_id]['name'] = name
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
    bot.register_next_step_handler(message, getsurname_handler)



@bot.message_handler(content_types=['text'])
def getsurname_handler(message):
        surnmame = message.text
        userdata[message.chat.id]['surname'] = surnmame
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é:')
        bot.register_next_step_handler(message,getcompany_handler)

@bot.message_handler(content_types=['text'])
def getcompany_handler(message):
        company = message.text
        userdata[message.chat.id]['company'] = company
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ')
        bot.register_next_step_handler(message,getphone_handler)

@bot.message_handler(content_types=['text'])
def getphone_handler(message):
        from datetime import datetime
        phone = message.text
        userdata[message.chat.id]['phone'] = phone
        userdata[message.chat.id]['time'] = datetime.now().strftime('%Y-%m-%d')
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! \n'
                                          '–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å\n'
                                          '–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏')
        # print(message)
        userdata[message.chat.id]['username'] = f'{message.from_user.username}'
        create_info_google_sheets(userdata,message.chat.id)
        create_task_crm(userdata,message.chat.id)

        # print(userdata)



bot.polling(none_stop=True)











# @bot.inline_handler(lambda query: query.query == 'text')
# def query_text(inline_query):
#     try:
#         r = types.InlineQueryResultArticle('1', 'Result', types.InputTextMessageContent('Result message.'))
#         r2 = types.InlineQueryResultArticle('2', 'Result2', types.InputTextMessageContent('Result message2.'))
#         bot.answer_inline_query(inline_query.id, [r, r2])
#     except Exception as e:
#         print(e)
# @bot.message_handler(func=lamb–µda m: True)
# def echo_all(message):
# 	bot.reply_to(message, message.text)
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @bot.message_handler(func=lambda message: True)
# def handle_all_messages(message):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
#     if not message.text.isdigit():
#         # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ
#         bot.reply_to(message, "–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
#     else:
#         # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
#         pass




















